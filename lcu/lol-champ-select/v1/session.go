package v1

import (
	"crypto/tls"
	"encoding/base64"
	"fmt"
	jsoniter "github.com/json-iterator/go"
	"io"
	"log"
	"net/http"
)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// GetSession returns champion select session data.
func GetSession(token string, port uint64) *Session {
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	req, err := http.NewRequest("GET", fmt.Sprintf("https://127.0.0.1:%d/lol-champ-select/v1/session", port), nil)
	if err != nil {
		return nil
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Authorization", fmt.Sprintf("Basic %s", base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("riot:%s", token)))))

	resp, err := client.Do(req)
	if err != nil {
		return nil
	}
	defer func(Body io.ReadCloser) {
		_ = Body.Close()
	}(resp.Body)
	if resp.StatusCode != 200 {
		return nil
	}

	bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Printf("Failed to read body: %s\n", err)
		return nil
	}

	session, err := UnmarshalSession(bytes)
	if err != nil {
		log.Printf("Failed to unmarshal session: %s\n", err)
		return nil
	}

	return &session
}

func UnmarshalSession(data []byte) (Session, error) {
	var r Session
	err := jsoniter.Unmarshal(data, &r)
	return r, err
}

type Session struct {
	BenchChampionIDS []int    `json:"benchChampionIds"`
	BenchEnabled     bool     `json:"benchEnabled"`
	MyTeam           []MyTeam `json:"myTeam"`
	Timer            Timer    `json:"timer"`
}

type MyTeam struct {
	ChampionID     int64 `json:"championId"`
	SelectedSkinID int64 `json:"selectedSkinId"`
	SummonerID     int64 `json:"summonerId"`
}

type Timer struct {
	AdjustedTimeLeftInPhase int64 `json:"adjustedTimeLeftInPhase"`
	IsInfinite              bool  `json:"isInfinite"`
}
